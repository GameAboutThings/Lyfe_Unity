// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "MarchingCubeBuffers.compute"

struct Triangle {
	float3 vertexC;
	float3 vertexB;
	float3 vertexA;
};

RWStructuredBuffer<float3> vertices;
AppendStructuredBuffer<int3> tris;
StructuredBuffer<Triangle> triangles;
int insertNextV;
int insertNextT;
uint numTris;

int IndexOf(float3 _vertex)
{
	int v = insertNextV;
	for (int i = 0; i < v; i++)
	{
		if (_vertex.x == vertices[i].x &&
			_vertex.y == vertices[i].y &&
			_vertex.z == vertices[i].z)
		{
			return i;
		}
	}
	return -1;
}

int Index(uint3 _id)
{
	uint layALength = numTris / 8;
	uint layBLength = layALength / 8;
	uint layCLength = layBLength / 8;
	return layALength * _id.x + layBLength * _id.y + layCLength * _id.z;
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	int index = Index(id);
	Triangle t = triangles[index];
	int3 indices = { -1, -1, -1 };

	index = IndexOf(t.vertexA);
	if (index == -1)
	{
		index = insertNextV;
		vertices[insertNextV] = t.vertexA;
		insertNextV++;
	}
	indices.x = index;

	index = IndexOf(t.vertexB);
	if (index == -1)
	{
		index = insertNextV;
		vertices[insertNextV] = t.vertexB;
		insertNextV++;
	}
	indices.y = index;

	index = IndexOf(t.vertexC);
	if (index == -1)
	{
		index = insertNextV;
		vertices[insertNextV] = t.vertexC;
		insertNextV++;
	}
	indices.z = index;

	tris.Append(indices);
}
